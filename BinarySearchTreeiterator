/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 */
var BSTIterator = function(root) {
    if(!root) {
        this.data = [];
        return;
    }
    
    let arr =[];
    function traverse(node) {
        if(!node) {
            return;
        }
        traverse(node.left);
        arr.push(node.val);
        traverse(node.right);
    }
    
    
    
    
    traverse(root);
    
    this.data = arr.reverse();
};

/**
 * @return {number}
 */
BSTIterator.prototype.next = function() {
    return this.data.pop();
};

/**
 * @return {boolean}
 */
BSTIterator.prototype.hasNext = function(arr) {
    return this.data.length > 0;
};

/** 
 * Your BSTIterator object will be instantiated and called as such:
 * var obj = new BSTIterator(root)
 * var param_1 = obj.next()
 * var param_2 = obj.hasNext()
 */
